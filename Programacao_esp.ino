#include <ESP8266_Lib.h> //INCLUSÃO DE BIBLIOTECA
#include <BlynkSimpleShieldEsp8266.h> //INCLUSÃO DE BIBLIOTECA
#include <SoftwareSerial.h> //INCLUSÃO DE BIBLIOTECA
#include "EmonLib.h" //INCLUSÃO DE BIBLIOTECA

SoftwareSerial EspSerial(10, 11); //PINOS QUE EMULAM A SERIAL (PINO 10 É O RX E PINO 11 É O TX)
 
char auth[] = "YourAuthToken"; //AUTH TOKEN (FORNECIDO PELO PROJETO NO BLYNK E POR E-MAIL)
 
BlynkTimer timer; //OBJETO DO TIPO BlynkTimer
 
const int pinoSensor = A2; //PINO ANALÓGICO EM QUE O SENSOR ESTÁ CONECTADO
 
char ssid[] = "NOME DA SUA REDE WIFI"; //VARIÁVEL QUE ARMAZENA O NOME DA REDE SEM FIO EM QUE VAI CONECTAR
char pass[] = "SENHA DA SUA REDE WIFI"; //VARIÁVEL QUE ARMAZENA A SENHA DA REDE SEM FIO EM QUE VAI CONECTAR

float ruido = 0.08; //RUÍDO PRODUZIDO NA SAÍDA DO SENSOR (DEVE SER AJUSTADO COM A CARGA DESLIGADA APÓS CARREGAMENTO DO CÓDIGO NO ARDUINO)
 
#define ESP8266_BAUD 9600 //TAXA DE COMUNICAÇÃO DO ESP8266 COM O ARDUINO UNO (SEMPRE UTILIZE 9600 BAUDS)
#define Corrente_CAL 18.40 //VALOR DE CALIBRAÇÃO (DEVE SER AJUSTADO EM PARALELO COM UM MULTÍMETRO MEDINDO A CORRENTE DA CARGA)
 
ESP8266 wifi(&EspSerial); //PASSO OS PARÂMETROS PARA A FUNÇÃO
EnergyMonitor emon1; //CRIA UMA INSTÂNCIA
 
void setup(){
  Serial.begin(9600); //INICIALIZA A SERIAL
  pinMode(pinoSensor, INPUT); //DECLARA O PINO COMO ENTRADA
 
  EspSerial.begin(ESP8266_BAUD); //INICIA A COMUNICAÇÃO COM A TAXA INFORMADA NO ESP8266_BAUD
  delay(10); //INTERVALO DE 10 MILISSEGUNDOS
 
  Blynk.begin(auth, wifi, ssid, pass); //INICIALIZA A COMUNICAÇÃO BLYNK INFORMANDO OS PARÂMETROS
 
  timer.setInterval(1000L, sendUptime); //DEFINE O INTERVALO DE 1 SEGUNDO(1000L = 1000 MILISSEGUNDOS)
  //PARA EXECUÇÃO DA FUNÇÃO sendUptime
  emon1.current(pinoSensor, Corrente_CAL); //PASSA PARA A FUNÇÃO OS PARÂMETROS (PINO ANALÓGIO / VALOR DE CALIBRAÇÃO)

}
 
void sendUptime(){ //FUNÇÃO QUE OBTÉM A TEMPERATURA / UMIDADE E ENVIA O VALOR OBTIDO PARA OS WIDGETs GAUGE
  emon1.calcVI(17,100); //FUNÇÃO DE CÁLCULO (17 SEMICICLOS / TEMPO LIMITE PARA FAZER A MEDIÇÃO)
  double corrente = emon1.Irms; //VARIÁVEL RECEBE O VALOR DE CORRENTE RMS OBTIDO
  corrente = corrente-ruido; //VARIÁVEL RECEBE O VALOR RESULTANTE DA CORRENTE RMS MENOS O RUÍDO
  
  if(corrente < 0){ //SE O VALOR DA VARIÁVEL FOR MENOR QUE 0, FAZ 
      corrente = 0; //VARIÁVEL RECEBE 0
  }
  DHT.read11(pinoDHT11); //LÊ AS INFORMAÇÕES DO SENSOR
  Blynk.virtualWrite(1, corrente); //ENVIA AO WIDGET GAUGE (PINO VIRTUAL 1) O VALOR DA TEMPERATURA
}
 
void loop(){
  Blynk.run(); //INICIALIZA O BLYNK
  timer.run(); //INICIALIZA O TIMER
 
    Serial.print("Corrente medida: "); //IMPRIME O TEXTO NA SERIAL
    Serial.print(corrente); //IMPRIME NA SERIAL O VALOR DE CORRENTE MEDIDA
    Serial.println("A"); //IMPRIME O TEXTO NA SERIAL
}
